{"version":3,"sources":["components/DateInput.js","components/Photo.js","keys.js","App.js","serviceWorker.js","index.js"],"names":["buttonPosition","display","marginTop","marginBottom","buttonStyle","backgroundColor","DateInput","props","className","selected","date","onChange","changeDate","style","onClick","handleClick","Photo","textShadow","textAlign","photo","title","media_type","src","url","alt","fontWeight","explanation","API_KEY","App","state","Date","randomDate","start","end","getTime","Math","random","ranDate","formatDate","toISOString","split","setState","getPhotoByDate","fetch","then","response","json","photoData","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yTAIMA,G,MAAiB,CACrBC,QAAS,QACTC,UAAW,SACXC,aAAc,WAEVC,EAAc,CAClBC,gBAAiB,QAuBJC,EArBG,SAACC,GAAD,OAChB,yBAAKC,UAAU,eACb,2BACE,4CAEF,kBAAC,IAAD,CACEA,UAAU,eACVC,SAAUF,EAAMG,KAChBC,SAAUJ,EAAMK,aAElB,yBAAKC,MAAOb,GACV,4BACEc,QAASP,EAAMQ,YACfF,MAAOT,EACPI,UAAU,mBAHZ,mBC0BSQ,EAhDD,SAACT,GAsCb,OACE,yBAAKC,UAAU,2BACb,wBAAIK,MAjCY,CAClBI,WAAY,kBACZC,UAAW,WA+BgBX,EAAMY,MAAMC,OAzBR,UAA3Bb,EAAMY,MAAME,WAEZ,yBACER,MAAO,CAAEV,aAAc,QACvBK,UAAU,oBACVc,IAAKf,EAAMY,MAAMI,IACjBC,IAAKjB,EAAMY,MAAMC,QAGe,UAA3Bb,EAAMY,MAAME,WAEnB,4BACER,MAAO,CAAEV,aAAc,QACvBiB,MAAM,wBACNZ,UAAU,oBACVc,IAAKf,EAAMY,MAAMI,IACjBC,IAAKjB,EAAMY,MAAMC,aAIrB,EAQA,uBAAGP,MAzCmB,CACxBY,WAAY,OACZR,WAAY,iBAuCoBV,EAAMY,MAAMO,eC5C1CC,EAAU,2CC6EDC,E,2MAtEbC,MAAQ,CACNnB,KAAM,IAAIoB,KACVX,MAAO,I,EAETY,WAAa,SAACC,EAAOC,GAEnB,OAAO,IAAIH,KACTE,EAAME,UAAYC,KAAKC,UAAYH,EAAIC,UAAYF,EAAME,a,EAI7DnB,YAAc,SAACL,GAIb,IAAI2B,EAAU,EAAKN,WAAW,IAAID,KAAK,KAAM,EAAS,IAAK,IAAIA,MAC/D,EAAKlB,WAAWyB,I,EAElBC,WAAa,SAAC5B,GAEZ,OAAOA,EAAK6B,cAAcC,MAAM,KAAK,I,EAEvC5B,WAAa,SAACF,GACZ,EAAK+B,SAAS,CAAE/B,KAAMA,IACtB,EAAKgC,eAAe,EAAKJ,WAAW5B,K,EAEtCgC,eAAiB,SAAAhC,GACfiC,MAAM,4CAAD,OAA6CjC,EAA7C,oBAA6DiB,IAC/DiB,MAAK,SAACC,GACL,OAAOA,EAASC,UAEjBF,MAAK,SAACG,GACL,EAAKN,SAAS,CAAEtB,MAAO4B,Q,mFAIR,IAAD,OAClBJ,MAAM,+CAAD,OAAgDhB,IAClDiB,MAAK,SAACC,GACL,OAAOA,EAASC,UAEjBF,MAAK,SAACE,GACL,EAAKL,SAAS,CAAEtB,MAAO2B,S,+BAa3B,OACE,yBAAKtC,UAAU,aACb,yBAAKA,UAAU,kBACb,wBAAIK,MAPU,CAClBI,WAAY,kBACZC,UAAW,WAKP,uCACA,kBAAC,EAAD,CACER,KAAMsC,KAAKnB,MAAMnB,KACjBE,WAAYoC,KAAKpC,WACjBG,YAAaiC,KAAKjC,cAEpB,kBAAC,EAAD,CAAOI,MAAO6B,KAAKnB,MAAMV,c,GAjEjB8B,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjB,MAAK,SAAAkB,GACjCA,EAAaC,kB","file":"static/js/main.ea287161.chunk.js","sourcesContent":["import React from 'react'\nimport DatePicker from 'react-datepicker'\nimport 'react-datepicker/dist/react-datepicker.css'\n\nconst buttonPosition = {\n  display: 'block',\n  marginTop: '1.5rem',\n  marginBottom: '1.5rem'\n}\nconst buttonStyle = {\n  backgroundColor: 'blue'\n}\nconst DateInput = (props) => (\n  <div className=\"text-center\">\n    <p>\n      <em>Pick a Date</em>\n    </p>\n    <DatePicker\n      className=\"form-control\"\n      selected={props.date}\n      onChange={props.changeDate}\n    />\n    <div style={buttonPosition}>\n      <button\n        onClick={props.handleClick}\n        style={buttonStyle}\n        className=\"btn btn-default\"\n      >\n        Random Photo\n      </button>\n    </div>\n  </div>\n)\nexport default DateInput\n","import React from 'react'\nconst Photo = (props) => {\n\n  const explanationStyles = {\n    fontWeight: 'bold',\n    textShadow: 'navy 1px 1px'\n  }\n\n  const titleStyles = {\n    textShadow: '1px 1px darkred',\n    textAlign: 'center'\n  }\n\n  //function to check to see if nasa api returns video or image\n  // and render correct html accordingly\n  function renderContentType() {\n    if (props.photo.media_type === 'image') {\n      return (\n        <img\n          style={{ marginBottom: '20px' }}\n          className=\"img-fluid rounded\"\n          src={props.photo.url}\n          alt={props.photo.title}\n        />\n      )\n    } else if (props.photo.media_type === 'video') {\n      return (\n        <iframe\n          style={{ marginBottom: '20px' }}\n          title=\"nasa video of the day\"\n          className=\"img-fluid rounded\"\n          src={props.photo.url}\n          alt={props.photo.title}\n        ></iframe>\n      )\n    } else {\n      return\n    }\n  }\n  return (\n    <div className=\"card card-body bg-light\">\n      <h4 style={titleStyles}>{props.photo.title}</h4>\n\n      {renderContentType()}\n      <p style={explanationStyles}>{props.photo.explanation}</p>\n    </div>\n  )\n}\n\nexport default Photo\n","const API_KEY = '1s3D9kK8DLJgeyngcBZ4rm1827pDyMDpdtThM5mc'\nexport { API_KEY }\n","//App.js\nimport React, { Component } from 'react'\nimport DateInput from './components/DateInput'\nimport Photo from './components/Photo.js'\nimport { API_KEY } from './keys.js'\n\nclass App extends Component {\n  state = {\n    date: new Date(),\n    photo: ''\n  }\n  randomDate = (start, end) => {\n    // return random date between start of Nasa POD and current Date\n    return new Date(\n      start.getTime() + Math.random() * (end.getTime() - start.getTime())\n    )\n  }\n\n  handleClick = (date) => {\n    // generates random date and passes it into our\n    // changeDate function which also updates state and\n    // fetches a photo again\n    let ranDate = this.randomDate(new Date(1995, 0o6 - 1, 16), new Date())\n    this.changeDate(ranDate)\n  }\n  formatDate = (date) => {\n    // converts date to yyyy-mm-dd\n    return date.toISOString().split('T')[0]\n  }\n  changeDate = (date) => {\n    this.setState({ date: date })\n    this.getPhotoByDate(this.formatDate(date))\n  }\n  getPhotoByDate = date => {\n    fetch(`https://api.nasa.gov/planetary/apod?date=${date}&api_key=${API_KEY}`)\n      .then((response) => {\n        return response.json()\n      })\n      .then((photoData) => {\n        this.setState({ photo: photoData })\n      })\n  }\n  // lifecycle method that render photo before app renders\n  componentDidMount() {\n    fetch(`https://api.nasa.gov/planetary/apod?api_key=${API_KEY}`)\n      .then((response) => {\n        return response.json()\n      })\n      .then((json) => {\n        this.setState({ photo: json })\n      })\n  }\n\n  \n\n\n  render() {\n    // Style for header\n    const headerStyle = {\n      textShadow: '1px 2px #282794',\n      textAlign: 'center'\n    }\n    return (\n      <div className=\"container\">\n        <div className=\"card card-body\">\n          <h2 style={headerStyle} >NASA's Astronomy Picture of the Day</h2>\n          <DateInput\n            date={this.state.date}\n            changeDate={this.changeDate}\n            handleClick={this.handleClick}\n          />\n          <Photo photo={this.state.photo} />\n        </div>\n      </div>\n    )\n  }\n}\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}